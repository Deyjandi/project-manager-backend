"A project."
type Project {
    "Unique primary key."
    id: ID!

    "Unique name."
    name: String!

    "The project's task list."
    tasks: [Task]! @hasMany

    "The project's meta attribute list."
    metas: [Meta]! @hasMany

    "When the project was created."
    created_at: DateTime!

    "When the project was last updated."
    updated_at: DateTime!
}

extend type Query {
    "List multiple projects."
    projects: [Project]!
        @paginate(defaultCount: 10)
        @guard
        @can(ability: "viewAny")
}

input CreateTasksHasMany {
    create: [CreateTaskInput!]
    update: [UpdateTaskInput!]
    delete: [ID!]
}

input CreateMetasHasMany {
    create: [CreateMetaInput!]
    update: [UpdateMetaInput!]
    delete: [ID!]
}

input CreateProjectInput {
    name: String! @rules(apply: ["string", "max:255", "unique:projects,name"])
    tasks: CreateTasksHasMany
    metas: CreateMetasHasMany
}

input UpdateProjectInput {
    name: String @rules(apply: ["string", "max:255", "unique:projects,name"])
    tasks: CreateTasksHasMany
    metas: CreateMetasHasMany
}

extend type Mutation {
    createProject(input: CreateProjectInput! @spread): Project!
        @create
        @guard
        @can(ability: "create")

    updateProject(
        id: ID! @rules(apply: ["exists:projects,id"])
        input: UpdateProjectInput! @spread
    ): Project! @update @guard @can(ability: "update", find: "id")

    deleteProject(id: ID! @rules(apply: ["exists:projects,id"])): Project!
        @delete
        @guard
        @can(ability: "delete", find: "id")
}
